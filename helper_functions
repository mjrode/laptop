#!/bin/sh
fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\nlogger:${fmt}\\n" "$@"
}

message_user() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\nUser Input Needed\\n------------------\\n\\n${fmt}\\n" "$@"
}
append_to_bash_profile() {
  local text="$1" bash_profile
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.bash_profile.local" ]; then
    bash_profile="$HOME/.bash_profile.local"
  else
    bash_profile="$HOME/.bash_profile"
  fi

  if ! grep -Fqs "$text" "$bash_profile"; then
    if [ "$skip_new_line" -eq 1 ]; then
      fancy_echo "Adding ${text} to ${bash_profile} with NO new line"
      printf "%s\\n" "$text" >> "$bash_profile"
    else
      fancy_echo "Adding ${text} to ${bash_profile} with a new line"
      printf "\\n%s\\n" "$text" >> "$bash_profile"
    fi
  fi
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    fancy_echo "Updating gem: ${@}"
    # gem update "$@"
  else
    fancy_echo "Installing gem: ${@}"
    gem install "$@"
  fi
}

install_custom_malauzai_gem(){
  if gem list "$5" --installed > /dev/null; then
    fancy_echo "${5} is already installed"
  else
    fancy_echo "Installing ${5}"
    git clone $2
    cd $1
    gem build $3
    gem uninstall $1
    gem install $4
    cd ..
    rm -rf $1

  fi
}

containsElement () {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}

if_true_run_command(){
  if $1; then
    ($2)
    fancy_echo $3
  else
    fancy_echo $4
    ($5)
  fi
}

if_false_run_command(){
  if $1; then
    fancy_echo $2
  else
    ($3)
    fancy_echo $4
  fi
}

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

export PATH="/usr/local/bin:$PATH"
export PATH="$HOME/.rbenv/bin:$PATH"

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

# Any subsequent(*) commands which fail will cause the shell script to exit immediately
set -e
